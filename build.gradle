// Top-level build file where you can add configuration options common to all sub-projects/modules.
group = 'it.gruppopam.android'
version = '1.0.5'
description = 'Android library for store apps'

buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

configurations {
    generic {
        description = 'generic'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

def libraryVersionAlreadyExistes = true;

task resolveCompileSources {
    doLast {
        try {
            configurations.getByName("generic").incoming.resolutionResult.allDependencies.collect { it.selected.id }

            libraryVersionAlreadyExistes = true;
            println "Library version already exists!"
        } catch (Exception e) {
            libraryVersionAlreadyExistes = false;
            println "Library not exists"
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: "com.jfrog.artifactory"

android {
    compileSdkVersion 27
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = rootProject.file("artifacts/store-app-library-${version}-${variant.name}.aar")
        }

    }

    afterEvaluate {
        apply plugin: 'maven-publish'

        artifactoryPublish.skip = true

        publishing {
            artifactoryPublish.dependsOn('resolveCompileSources')
            artifactoryPublish.dependsOn('assembleRelease')
            artifactoryPublish.dependsOn('generatePomFileForAarPublication')

            publications {
                // Creates a Maven publication called "aar".
                aar(MavenPublication) {
                    // Applies the component for the release build variant.
                    artifact("artifacts/store-app-library-${version}-release.aar")
                }
            }
        }

        artifactoryPublish {
            /*doFirst {
                if (libraryVersionAlreadyExistes)
                    throw new GradleException("Library version already exists!")
            }*/
            publications(publishing.publications.aar)
        }

        artifactory {
            publish {
                contextUrl = System.getenv("ARTIFACTORY_URL")
                repository {
                    repoKey = System.getenv("MAVEN_REPO_KEY") //The Artifactory repository key to publish to

                    username = System.getenv("ARTIFACTORY_USER")          //The publisher user name
                    password = System.getenv("ARTIFACTORY_PASS")
                }

                defaults {
                    publications ('aar')
                    publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
                    publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
                    publishPom = true   //Publish generated POM files to Artifactory (true by default).
                    publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
                }
            }
        }
    }
}

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().getUrl())
        }
    }
}

uploadArchives.dependsOn(build)

apply from: 'dependencies.gradle'

dependencies {
    generic "it.gruppopam.android:${rootProject.name}:${version}"
}